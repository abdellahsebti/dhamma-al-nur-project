rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }

    // Rate limiting functions
    function getRecentSubmissions(collection) {
      return collection.where('ipAddress', '==', request.ip)
                     .where('createdAt', '>', request.time.toMillis() - 3600000);
    }

    function isRateLimited(collection, limit) {
      let recentSubmissions = getRecentSubmissions(collection);
      return recentSubmissions.size() >= limit;
    }

    function getRecentReads(collection, identifier) {
      return collection.where('identifier', '==', identifier)
                     .where('readAt', '>', request.time.toMillis() - 3600000);
    }

    function isReadRateLimited(collection, identifier, limit) {
      let recentReads = getRecentReads(collection, identifier);
      return recentReads.size() >= limit;
    }

    function recordRead(collection, identifier) {
      return collection.add({
        identifier: identifier,
        readAt: request.time
      });
    }

    // Get identifier for rate limiting (either user ID or IP)
    function getRateLimitIdentifier() {
      return request.auth != null ? request.auth.uid : request.ip;
    }

    // Spam prevention functions
    function containsSpamKeywords(text) {
      let lcText = text.lower();
      return lcText.matches('.*viagra.*') ||
             lcText.matches('.*casino.*') ||
             lcText.matches('.*lottery.*') ||
             lcText.matches('.*winner.*') ||
             lcText.matches('.*prize.*') ||
             lcText.matches('.*free.*') ||
             lcText.matches('.*limited time.*') ||
             lcText.matches('.*buy now.*') ||
             lcText.matches('.*click here.*');
    }

    function isValidEmail(email) {
      return email.matches('^[^@]+@[^@]+\\.[^@]+$') && 
             !email.matches('.*@(temp|spam|fake|test)\\.com$') &&
             email.size() <= 100;
    }

    function isValidPhone(phone) {
      return phone.matches('^[+]?[0-9]{8,15}$');
    }

    function isValidName(name) {
      return name.size() >= 2 && name.size() <= 50 && 
             !name.matches('.*[0-9].*') &&
             !containsSpamKeywords(name);
    }

    function isValidMessage(message) {
      return message.size() >= 10 && message.size() <= 1000 &&
             !containsSpamKeywords(message);
    }
    
    function isValidContactForm() {
      let form = request.resource.data;
      return form.keys().hasAll(['name', 'email', 'subject', 'message', 'createdAt', 'status']) &&
        isValidName(form.name) &&
        isValidEmail(form.email) &&
        form.subject is string && form.subject.size() >= 3 && form.subject.size() <= 100 &&
        isValidMessage(form.message) &&
        form.createdAt is timestamp &&
        form.status in ['new', 'read', 'replied'];
    }
    
    function isValidJoinRequest() {
      let request = request.resource.data;
      return request.keys().hasAll(['name', 'email', 'phone', 'message', 'createdAt', 'status']) &&
        isValidName(request.name) &&
        isValidEmail(request.email) &&
        isValidPhone(request.phone) &&
        isValidMessage(request.message) &&
        request.createdAt is timestamp &&
        request.status in ['pending', 'approved', 'rejected'];
    }

    // Video validation function
    function isValidVideo() {
      let video = request.resource.data;
      return video.keys().hasAll(['title', 'description', 'category', 'duration', 'videoUrl', 'thumbnailUrl', 'uploadDate']) &&
        video.title is string && video.title.size() > 0 && video.title.size() <= 200 &&
        video.description is string && video.description.size() > 0 && video.description.size() <= 1000 &&
        video.category is string && video.category.size() > 0 &&
        video.duration is string && video.duration.size() > 0 &&
        video.videoUrl is string && video.videoUrl.size() > 0 &&
        video.thumbnailUrl is string && video.thumbnailUrl.size() > 0 &&
        video.uploadDate is timestamp;
    }

    // Contact Forms Collection
    match /contactForms/{formId} {
      // Allow public creation with basic validation
      allow create: if 
        request.resource.data.keys().hasOnly(['name', 'email', 'message', 'subject', 'status', 'createdAt', 'ipAddress']) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50 &&
        request.resource.data.email is string &&
        request.resource.data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
        request.resource.data.message is string &&
        request.resource.data.message.size() >= 10 &&
        request.resource.data.message.size() <= 1000 &&
        request.resource.data.subject is string &&
        request.resource.data.subject.size() >= 3 &&
        request.resource.data.subject.size() <= 100 &&
        request.resource.data.status == 'new' &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.ipAddress is string;
      
      allow get, update, delete: if isAdmin();
      allow list: if isAdmin();
    }

    // Join Requests Collection
    match /joinRequests/{requestId} {
      // Allow public 'list' operations (queries).
      // This is NECESSARY for your client-side `checkRateLimit` function.
      allow list: if true;

      // TEMPORARILY ALLOW ALL CREATES FOR LOCAL DEVELOPMENT
      // Re-enable and test all validations thoroughly before production!
      allow create: if true;
      /*
      // ORIGINAL SECURE RULE - UNCOMMENT AND TEST BEFORE PRODUCTION
      allow create: if
        request.resource.data.keys().hasOnly([
            'name', 'email', 'phone', 'specialization', 'message',
            'status', 'createdAt', 'ipAddress', 'agreedToTerms', 'updatedAt'
        ]) &&
        isValidName(request.resource.data.name) &&
        isValidEmail(request.resource.data.email) &&
        isValidPhone(request.resource.data.phone) &&
        request.resource.data.specialization is string &&
        request.resource.data.specialization.size() >= 3 &&
        request.resource.data.specialization.size() <= 100 &&
        isValidMessage(request.resource.data.message) &&
        request.resource.data.status == 'pending' &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time &&
        request.resource.data.ipAddress is string &&
        request.resource.data.agreedToTerms == true;
      */

      // Only admins can get a specific document by ID, update, or delete
      allow get, update, delete: if isAdmin();
    }

    // Admins Collection
    match /admins/{userId} {
      // Only allow reading own admin status
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only allow creating/updating own admin document with strict validation
      allow create, update: if isAuthenticated() && 
        request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['email', 'role', 'uid', 'createdAt', 'updatedAt']) &&
        request.resource.data.role == 'admin' &&
        request.resource.data.uid == userId &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;
        
      // Only allow deleting own admin document
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Benefits Collection
    match /benefits/{benefitId} {
      // Allow public reads
      allow read: if true;
      // Only admins can write benefits
      allow write: if isAdmin();
    }

    // Coffee Stories Collection
    match /coffeeStories/{storyId} {
      // Allow public reads
      allow read: if true;
      // Only admins can write stories
      allow write: if isAdmin();
    }

    // Chapters Collection
    match /chapters/{chapterId} {
      // Allow public reads
      allow read: if true;
      // Only admins can write chapters
      allow write: if isAdmin();
    }

    // Videos Collection
    match /videos/{videoId} {
      // Allow public reads
      allow read: if true;
      // Only admins can write videos
      allow write: if isAdmin();
    }

    // Podcasts Collection
    match /podcasts/{podcastId} {
      // Allow public reads
      allow read: if true;
      // Only admins can write podcasts
      allow write: if isAdmin();
    }

    // Read Logs Collection
    match /readLogs/{logId} {
      // Only allow creation of read logs
      allow create: if true;
      // Only admins can read or delete logs
      allow read, delete: if isAdmin();
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 